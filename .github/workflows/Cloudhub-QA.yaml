name: Cloudhub - CI/CD - QA

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - 'develop'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  pipeline:
    environment: qa
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Cache Maven Dependencies
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build Maven
      - name: Build Maven
        shell: bash
        env:
          encryption: ${{ secrets.ENCRYPTION_KEY }}
        run:  |
          mvn --batch-mode package "-DencryptionKey=${encryption}"

      #mkdir staging && cp target/*.jar staging

      #- name: Upload Artifact
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: Package
      #    path: staging
      - name: Deploy to Cloudhub
        shell: bash
        env:
          environment: qa
          repository: ${{ github.repository }}
          encryption: ${{ secrets.ENCRYPTION_KEY }}
          credentials: ${{ secrets.ANYPOINT_CREDENTIALS_FILE }}
          clientId: ${{ secrets.ANYPOINT_PLATFORM_CLIENT_ID }}
          clientSecret: ${{ secrets.ANYPOINT_PLATFORM_CLIENT_SECRET }}
        run: |
          sudo npm i -g anypoint-cli@latest
          mkdir ~/.anypoint
          echo "$credentials" >> credentials
          cp ./credentials ~/.anypoint/
          rm credentials
          export ANYPOINT_PROFILE="${environment}"
          jarName=$(ls target/*.jar)
          repoName="${repository##*/}-${environment}"
          set -- "${repoName}"
          bash "${PWD}/automation/cloudhub-start.sh" $@
          set --
          if [ -f "$PWD/automation/env/${environment}/deploy.properties" ]; then
            while IFS='=' read key value; do
              set -- $@ "--$key $value"
            done < "$PWD/automation/env/${environment}/deploy.properties"
          else
            echo 'Artifact does not contain deployment.properties!'
            exit 1
          fi
          if [ -f "$PWD/automation/env/${environment}/runtime.properties" ]; then
            while IFS='=' read key value; do
              set -- $@ "--property $key:$value"
            done < "$PWD/automation/env/${environment}/runtime.properties"
          else
            echo 'Artifact does not contain runtime.properties!'
            exit 1
          fi
          set -- "$@" "--property encryptionKey:${encryption}" "--property anypoint.platform.client_id:${clientId}" "--property anypoint.platform.client_secret:${clientSecret}"
          set -- "$@" "'${repoName}'" "'${PWD}/${jarName}'"
          bash "${PWD}/automation/cloudhub-deploy.sh" $@
          set -- "'${repoName}'"
          bash "${PWD}/automation/cloudhub-healthcheck.sh" $@

      - name: Post-deployment API Tests
        shell: bash
        env:
          repository: ${{ github.repository }}
        run: |
          sudo npm i -g newman@latest
          repoName="${repository##*/}"
          newman run "automation/tests/${repoName}.postman_collection.json" -e "automation/tests/qa.postman_environment.json"
